#include <stdio.h>
#include <stdlib.h>
typedef enum {
INICIO, FIN, LEER, ESCRIBIR, ID, CONSTANTE, PARENIZQUIERDO,
PARENDERECHO, PUNTOYCOMA, COMA, ASIGNACION, SUMA, RESTA, FDT, ERROR
} TOKEN;

typedef struct {
    char palabraReservada[11];
}PalabraReservada;

PalabraReservada palabrasReservadas[5]={{"inicio"},{"fin"},{"leer"},{"escribir"}};

const int ESTADO_RECHAZO=14;
TOKEN palabraReserv;
FILE * archivo;



TOKEN scanner() {
int tabla[15][13] =
 //L   D   +   -   (    )   ,   ;   :   =  EOF ´ ´ OTRO
{{ 1,  3 , 5 , 6 , 7 ,  8,  9, 10, 11, 14, 13,  0, 14 },    //0
 { 1,  1 , 2 , 2 ,  2 , 2,  2,  2,  2,  2,  2,  2,  2 },  //1
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //2 ID
 { 4,  3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4,  4,  4,   4 },  //3
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //4 CTE
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //5 +
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //6 -
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //7 (
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //8 )
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //9 ,
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //10 ;
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 14, 14, 14 },  //11
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //12 ASIG
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },  //13 fdt
 { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 } };//14 err

    int estado=0;
    int i=0;
    char buffer[50];

    do{
        char caracter = fgetc(archivo);
        estado=tabla[estado][obtenerColumna(caracter)];
        if(caracter!=' '){
             buffer[i]=caracter;
             i++;
        }

    }while(!esEstadoFinal(estado) && estado!=ESTADO_RECHAZO);

    if(esPalabraReservada(buffer)==0)
        return palabraReservada(buffer);

    else
        return obtenerToken();

}


int esEstadoFinal(int estado){
    int esEstadoFinal=0;
    esEstadoFinal=(estado!=0 && estado!=1 && estado!=3 && estado!=ESTADO_RECHAZO)?1:0;
    return esEstadoFinal;
};


int obtenerColumna(int caracter){

if(isalpha(caracter))return 0;
if(isdigit(caracter))return 1;
if (isspace(caracter)) return 11;
switch(caracter){
case ('+'): return 2;
case ('-'): return 3;
case ('('): return 4;
case (')'): return 5;
case (','): return 6;
case (';'): return 7;
case (':'): return 8;
case ('='): return 9;
case (EOF): return 10;
default: return 12;

}

}

int esPalabraReservada(char buffer[30]){
    return (strcmp("inicio",buffer)||(strcmp("fin",buffer))||(strcmp("leer",buffer))||(strcmp("escribir",buffer)));
}

int palabraReservada(char buffer[30]){
    if(strcmp("inicio",buffer)==0) return INICIO;
    if(strcmp("fin",buffer)==0)    return FIN;
    if(strcmp("leer",buffer)==0)   return LEER;
    if(strcmp("escribir",buffer)==0)return ESCRIBIR;
    return 0;

}

int obtenerToken(int estado){
switch(estado){
    case 2: return ID;
    case 4: return CONSTANTE;
    case 5: return PARENIZQUIERDO;
    case 6: return PARENDERECHO;
    case 9: return COMA;
    case 10: return PUNTOYCOMA;
    case 12: return ASIGNACION;
    case 13:return FDT;
    case 14: return ERROR;
    default: return 0;
}
}


char *convertirATexto(proximoTok){
char lexema[40];
     switch(proximoTok){
     case INICIO: lexema[40]="INICIO";
     case FIN: lexema[40]="FIN";
     case LEER: lexema[40]="LEER";
     case ESCRIBIR: lexema[40]="ESCRIBIR";
     case ID: lexema[40]="ID";
     case CONSTANTE: lexema[40]="CONSTANTE";
     case PARENIZQUIERDO: lexema[40]="PARENIZQUIERDO";
     case PARENDERECHO: lexema[40]="PARENDERECHO";
     case PUNTOYCOMA: lexema[40]="PUNTOYCOMA";
     case COMA: lexema[40]="COMA";
     case ASIGNACION: lexema[40]="ASIGNACION";
     case SUMA: lexema[40]="SUMA";
     case RESTA: lexema[40]="RESTA";
     case FDT: lexema[40]="FDT";
     case ERROR:"ERROR";
     return *lexema;
     default: return 0;
     }

}

int main()
{
    /* Abre el archivo*/
    TOKEN proximoTok;
    char lexema[40];
    archivo = fopen("textoAnalizado.txt","r");
    if(archivo == NULL) {
      printf("Error al abrir el archivo");
      return(-1);}
    else
    /*Comienza el programa*/
    do{
    proximoTok = scanner();
    char lexema[40];
    lexema[40]=convertirATexto(proximoTok);
    int i=0;
    while(lexema!=NULL){
    printf("%c", lexema[i]);
    i++;
    }
    } while(proximoTok);

return 0;
}


